# -*- coding: utf-8 -*-
# Copyright 2019 Coop IT Easy SCRLfs
# 	    Robin Keunen <robin@coopiteasy.be>
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).

from openerp import models, fields, api, _
import logging

_logger = logging.getLogger(__name__)


def head(l):
    return l[0]


def tail(l):
    return l[1 : len(l)]


def key(line):
    return line.date, line.ref, line.partner_id.id


def sum_debit(lines):
    return round(sum(map(lambda l: l.credit, lines)), 2)


def sum_credit(lines):
    return round(sum(map(lambda l: l.debit, lines)), 2)


class AutoReconcileWizard(models.TransientModel):
    _name = "pos.autoreconcile.wizard"

    name = fields.Char(string="Name", required=False)
    account_id = fields.Many2one(
        comodel_name="account.account",
        string="Account to Reconcile",
        domain=[("reconcile", "=", True)],
    )
    start_date = fields.Date(string="Start Date")
    end_date = fields.Date(string="End Date")
    state = fields.Selection(
        string="State",
        selection=[
            ("draft", "Draft"),
            ("done", "Done"),
            ("cancelled", "Cancelled"),
        ],
        default="draft",
    )

    reconcile_line_ids = fields.One2many(
        comodel_name="pos.autoreconcile.wizard.line",
        inverse_name="wizard_id",
        string="Account Love Lines",
    )

    def next_rn(self):
        return self.env.ref(
            "pos_autoreconcile.sequence_temporary_matching_number", False
        ).next_by_id()

    def gen_name(self):
        return _("POS/RECONCILE/%s/%s/%s") % (
            self.account_id.name,
            self.start_date,
            self.end_date,
        )

    @api.multi
    def get_wizard_form_view(self):
        self.ensure_one()
        view_id = self.env.ref(
            "pos_autoreconcile.view_auto_reconcile_wizard_form"
        ).id
        return {
            "name": self.name,
            "type": "ir.actions.act_window",
            "res_model": "pos.autoreconcile.wizard",
            "view_id": view_id,
            "view_mode": "form",
            "res_id": self.id,
            "target": "current",
        }

    @api.multi
    def reconcile(self):
        self.ensure_one()
        self.name = self.gen_name()

        move_lines = (
            self.env["account.move.line"]
            .search(
                [
                    ("account_id", "=", self.account_id.id),
                    ("date", ">=", self.start_date),
                    ("date", "<=", self.end_date),
                    ("reconciled", "=", False),
                ]
            )
            .sorted(key)
        )

        def grouped_lines(lines):
            """
            :param lines: account move lines sorted by (date, ref, partner id)
            :return: tuples of key and lines grouped by (date, ref, partner id)
                - the key of balanced lines is generated by
                  sequence_temporary_matching_number,
                - unbalanced lines are returned last under the empty key ''

            """
            acc, unbalanced = [], []
            for line in lines:
                if acc and sum_credit(acc) == sum_debit(acc):
                    yield self.next_rn(), acc
                    acc = []
                elif acc and key(head(acc)) != key(line):
                    unbalanced += acc
                    acc = []
                else:
                    acc.append(line)
            yield "", unbalanced
            raise StopIteration

        for rn, lines in grouped_lines(move_lines):
            _logger.info("%s: %s lines" % (rn, len(lines)))
            for line in lines:
                if rn == '':
                    print '.',
                self.env["pos.autoreconcile.wizard.line"].create(
                    {
                        "wizard_id": self.id,
                        "account_move_line_id": line.id,
                        "reconcile_number": rn,
                    }
                )

        return self.get_wizard_form_view()

    @api.multi
    def confirm(self):
        self.ensure_one()
        reconcile_numbers = self.reconcile_line_ids.filtered(
            lambda rl: rl.reconcile_number
        ).mapped("reconcile_number")
        for rn in set(reconcile_numbers):
            aml = self.reconcile_line_ids.filtered(
                lambda rl: rl.reconcile_number == rn and not rl.reconciled
            ).mapped("account_move_line_id")
            _logger.info("reconciling %s" % aml.mapped("name"))
            if aml:
                aml.reconcile()

        self.state = "done"
        return self.get_wizard_form_view()

    @api.multi
    def cancel_unlink(self):
        print(self.account_id, self.start_date, self.end_date)


class AutoReconcileWizardLine(models.TransientModel):
    _name = "pos.autoreconcile.wizard.line"
    _order = "reconcile_number desc,date,ref,partner_id,debit,credit"

    wizard_id = fields.Many2one(
        comodel_name="pos.autoreconcile.wizard", string="Wizard", required=True
    )
    account_move_line_id = fields.Many2one(
        comodel_name="account.move.line", string="Account Move Line"
    )
    reconcile_number = fields.Char(string="Temporary Matching Number")
    full_reconcile_id = fields.Many2one(
        string="full_reconcile_id",
        related="account_move_line_id.full_reconcile_id",
    )

    date = fields.Date(
        string="Date", related="account_move_line_id.date", store=True
    )
    move_id = fields.Many2one(
        comodel_name="account.move",
        string="Journal Entry",
        related="account_move_line_id.move_id",
    )
    journal_id = fields.Many2one(
        comodel_name="account.journal",
        string="Journal",
        related="account_move_line_id.journal_id",
    )
    ref = fields.Char(
        string="Partner Reference",
        related="account_move_line_id.ref",
        store=True,
    )
    partner_id = fields.Many2one(
        comodel_name="res.partner",
        string="Partner",
        related="account_move_line_id.partner_id",
        store=True,
    )
    account_id = fields.Many2one(
        comodel_name="account.account",
        string="Account",
        related="account_move_line_id.account_id",
    )
    debit = fields.Monetary(related="account_move_line_id.debit", store=True)
    credit = fields.Monetary(related="account_move_line_id.credit", store=True)
    company_currency_id = fields.Many2one(
        comodel_name="res.currency",
        related="account_move_line_id.company_currency_id",
    )
    reconciled = fields.Boolean(
        string="Reconciled", related="account_move_line_id.reconciled"
    )
